<?php

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'] . '/Thrift.php';

// TODO : line below is commented out
// include_once $GLOBALS['THRIFT_ROOT'].'/packages/Example/Example_types.php';

interface ExampleIf {

    public function showCurrentTimestamp();

    public function asynchronousJob();
}

class ExampleClient implements ExampleIf {

    protected $input_ = null;
    protected $output_ = null;
    protected $seqid_ = 0;

    public function __construct($input, $output = null) {
        $this->input_ = $input;
        $this->output_ = $output ? $output : $input;
    }

    public function showCurrentTimestamp() {
        $this->send_showCurrentTimestamp();
        return $this->recv_showCurrentTimestamp();
    }

    public function send_showCurrentTimestamp() {
        $args = new Example_Example_showCurrentTimestamp_args();
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($this->output_, 'showCurrentTimestamp', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        } else {
            $this->output_->writeMessageBegin('showCurrentTimestamp', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_showCurrentTimestamp() {
        $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel)
            $result = thrift_protocol_read_binary($this->input_, 'Example_Example_showCurrentTimestamp_result', $this->input_->isStrictRead());
        else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new Example_Example_showCurrentTimestamp_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new Exception("showCurrentTimestamp failed: unknown result");
    }

    public function asynchronousJob() {
        $this->send_asynchronousJob();
    }

    public function send_asynchronousJob() {
        $args = new Example_Example_asynchronousJob_args();
        $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($this->output_, 'asynchronousJob', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        } else {
            $this->output_->writeMessageBegin('asynchronousJob', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

}

// HELPER FUNCTIONS AND STRUCTURES

class Example_Example_showCurrentTimestamp_args {

    static $_TSPEC;

    public function __construct() {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            );
        }
    }

    public function getName() {
        return 'Example_showCurrentTimestamp_args';
    }

    public function read($input) {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Example_showCurrentTimestamp_args');
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class Example_Example_showCurrentTimestamp_result {

    static $_TSPEC;
    public $success = null;

    public function __construct($vals = null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::STRING,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName() {
        return 'Example_showCurrentTimestamp_result';
    }

    public function read($input) {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Example_showCurrentTimestamp_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
            $xfer += $output->writeString($this->success);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class Example_Example_asynchronousJob_args {

    static $_TSPEC;

    public function __construct() {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
            );
        }
    }

    public function getName() {
        return 'Example_asynchronousJob_args';
    }

    public function read($input) {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Example_asynchronousJob_args');
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ExampleProcessor {

    protected $handler_ = null;

    public function __construct($handler) {
        $this->handler_ = $handler;
    }

    public function process($input, $output) {
        $rseqid = 0;
        $fname = null;
        $mtype = 0;
        echo '<pre>';var_dump($input);exit;
        $input->readMessageBegin($fname, $mtype, $rseqid);      
        $methodname = 'process_' . $fname;
        if (!method_exists($this, $methodname)) {
            $input->skip(TType::STRUCT);
            $input->readMessageEnd();
            $x = new TApplicationException('Function ' . $fname . ' not implemented.', TApplicationException::UNKNOWN_METHOD);
            $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
            $x->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
            return;
        }
        $this->$methodname($rseqid, $input, $output);
        return true;
    }

    protected function process_showCurrentTimestamp($seqid, $input, $output) {
        $args = new Example_Example_showCurrentTimestamp_args();
        $args->read($input);
        $input->readMessageEnd();
        $result = new Example_Example_showCurrentTimestamp_result();
        $result->success = $this->handler_->showCurrentTimestamp();
        $bin_accel = ($output instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($output, 'showCurrentTimestamp', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
        } else {
            $output->writeMessageBegin('showCurrentTimestamp', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->getTransport()->flush();
        }
    }

    protected function process_asynchronousJob($seqid, $input, $output) {
        $args = new Example_Example_asynchronousJob_args();
        $args->read($input);
        $input->readMessageEnd();
        $this->handler_->asynchronousJob();
        return;
    }

}

?>
